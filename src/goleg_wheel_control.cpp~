#include <stdio.h>
#include <time.h>
#include <string>
#include <math.h>

#include <ros/ros.h>
#include <sensor_msgs/Joy.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>

#include <dynamixel_msgs/JointState.h>
#include <sensor_msgs/JointState.h>
#include <dynamixel_controllers/SetSpeed.h>


#define PI 3.141592

int s[4] = {0, 0, 0, 0};


int b0 = 0;
int b1 = 0;
int b2 = 0;
int b3 = 0;
int b4 = 0;
int b5 = 0;
int b6 = 0;
int b7 = 0;
int b8 = 0;
int b9 = 0;
int b10 = 0;
int b11 = 0;
int b12 = 0;
int b13 = 0;
int b14 = 0;
int b15 = 0;

int initial = 0;

int turn_flag = 0;
float velocity11 = 0;
float velocity16 = 0;
float velocity21 = 0;
float velocity26 = 0;

int v_count = 0;


float X = 0;
float Y = 0;

float speed = 7.5;//並進速度7.5
float speed2 = 4.5;//旋回速度4.5

float joy_axes0 = 0;
float joy_axes1 = 0;
float joy_axes2 = 0;
float joy_axes3 = 0;
float joy_axes4 = 0;
float joy_axes5 = 0;
float joy_axes6 = 0;

float speed_turn = 2;


//後ろ足逆運動学パラメータ
float right_angle1 = 0;
float right_angle2 = 0;
float right_angle1_ = 0;
float right_angle2_ = 0;

float left_angle1 = 0;
float left_angle2 = 0;
float left_angle1_ = 0;
float left_angle2_ = 0;

float x_back_left = 0.15;
float y_back_left = 0;
float x_back_right = 0.15;
float y_back_right = 0;


float l1 = 0.09;
float l2 = 0.15;



using std::string;

float joint_angle[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


double x_camera = 93,y_camera = 0,z_camera = 0;

double x_arm = 0,y_arm = 0,z_arm = 0;



float roll = 0;
float pitch = 0;



class Joy_leg
{
	public:
		Joy_leg();
		
		//ジョイスティックの値を取得する関数
		void joycallback(const sensor_msgs::Joy &joy_msg);
		
		//タイマー関数
		void timerCallback(const ros::TimerEvent&);
		
		//度数法からラジアン法に変換する関数
		float deg_to_rad(float deg);
		
		//モデルに値を返すためにdynamixelの現在角度を得る関数
		void joint_callback10(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback11(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback12(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback13(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback20(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback21(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback22(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback23(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback30(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback31(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback32(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback33(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback40(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback41(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback42(const dynamixel_msgs::JointState::ConstPtr& pos);
		void joint_callback43(const dynamixel_msgs::JointState::ConstPtr& pos);
		
		//加速度センサの値を取得するためのコールバック関数
		void roll(const std_msgs::Float64ConstPtr& msg);
		void pitch(const std_msgs::Float64ConstPtr& msg);
		

	private:
		//SubscriberとPublisherの定義
		ros::Subscriber joy_sub;
		
		ros::Publisher dyn_pub[50];
		
		/*	
		ros::ServiceClient dynamixel_11;
		ros::ServiceClient dynamixel_16;
		ros::ServiceClient dynamixel_21;
		ros::ServiceClient dynamixel_26;
		*/
		
		string link_name_right,link_name_left;
		
		ros::Subscriber dyn_sub[20];
		ros::Publisher dyn_state_to_urdf;
		
		ros::Subscriber roll_sub,pitch_sub;

		
		//タイマーの定義
		ros::Timer timer;
		
	
		
		//送信するデータの変数の定義
		std_msgs::Float64 pos[50];

		
		sensor_msgs::JointState jsm;
		
		
		/*
		dynamixel_controllers::SetSpeed set_speed_11;
		dynamixel_controllers::SetSpeed set_speed_16;
		dynamixel_controllers::SetSpeed set_speed_21;
		dynamixel_controllers::SetSpeed set_speed_26;
		*/
		
};


Joy_leg::Joy_leg()
{
	//ノードの定義
	ros::NodeHandle node;
	
	//ジョイスティックからのデータを受け取ったらjoycallbackを実行
	joy_sub = node.subscribe("joy", 1, &Joy_leg::joycallback, this);
	
	//送信するtopicを定義する
	dyn_pub[1] = node.advertise<std_msgs::Float64>("/tilt_controller1/command", 1);//カメラアーム
	dyn_pub[2] = node.advertise<std_msgs::Float64>("/tilt_controller2/command", 1);
	dyn_pub[3] = node.advertise<std_msgs::Float64>("/tilt_controller3/command", 1);
	dyn_pub[4] = node.advertise<std_msgs::Float64>("/tilt_controller4/command", 1);//URG水平機構
	dyn_pub[5] = node.advertise<std_msgs::Float64>("/tilt_controller5/command", 1);	
    
    dyn_pub[14] = node.advertise<std_msgs::Float64>("/pan_controller14/command", 1);//脚車輪
	dyn_pub[24] = node.advertise<std_msgs::Float64>("/pan_controller24/command", 1);
	dyn_pub[34] = node.advertise<std_msgs::Float64>("/pan_controller34/command", 1);
	dyn_pub[44] = node.advertise<std_msgs::Float64>("/pan_controller44/command", 1);
	dyn_pub[15] = node.advertise<std_msgs::Float64>("/pan_controller15/command", 1);//本体車輪
	dyn_pub[25] = node.advertise<std_msgs::Float64>("/pan_controller25/command", 1);
	dyn_pub[35] = node.advertise<std_msgs::Float64>("/pan_controller35/command", 1);
	dyn_pub[45] = node.advertise<std_msgs::Float64>("/pan_controller45/command", 1);
	
	
	//backright
	dyn_pub[10] = node.advertise<std_msgs::Float64>("/tilt_controller10/command", 1);
	dyn_pub[11] = node.advertise<std_msgs::Float64>("/tilt_controller11/command", 1);
	dyn_pub[12] = node.advertise<std_msgs::Float64>("/tilt_controller12/command", 1);
	dyn_pub[13] = node.advertise<std_msgs::Float64>("/tilt_controller13/command", 1);
	dyn_pub[16] = node.advertise<std_msgs::Float64>("/tilt_controller16/command", 1);
	
	//backleft
	dyn_pub[20] = node.advertise<std_msgs::Float64>("/tilt_controller20/command", 1);
	dyn_pub[21] = node.advertise<std_msgs::Float64>("/tilt_controller21/command", 1);
	dyn_pub[22] = node.advertise<std_msgs::Float64>("/tilt_controller22/command", 1);
	dyn_pub[23] = node.advertise<std_msgs::Float64>("/tilt_controller23/command", 1);
	dyn_pub[26] = node.advertise<std_msgs::Float64>("/tilt_controller26/command", 1);
	
	//frontleft
	dyn_pub[30] = node.advertise<std_msgs::Float64>("/tilt_controller30/command", 1);
	dyn_pub[31] = node.advertise<std_msgs::Float64>("/tilt_controller31/command", 1);
	dyn_pub[32] = node.advertise<std_msgs::Float64>("/tilt_controller32/command", 1);
	dyn_pub[33] = node.advertise<std_msgs::Float64>("/tilt_controller33/command", 1);
	
	//frontright
	dyn_pub[40] = node.advertise<std_msgs::Float64>("/tilt_controller40/command", 1);
	dyn_pub[41] = node.advertise<std_msgs::Float64>("/tilt_controller41/command", 1);
	dyn_pub[42] = node.advertise<std_msgs::Float64>("/tilt_controller42/command", 1);
	dyn_pub[43] = node.advertise<std_msgs::Float64>("/tilt_controller43/command", 1);


    timer = node.createTimer(ros::Duration(0.1), &Joy_leg::timerCallback, this);
    
    
    
    dyn_sub[0] = node.subscribe("/tilt_controller10/state", 1, &Joy_leg::joint_callback10, this);
	dyn_sub[1] = node.subscribe("/tilt_controller11/state", 1, &Joy_leg::joint_callback11, this);
	dyn_sub[2] = node.subscribe("/tilt_controller12/state", 1, &Joy_leg::joint_callback12, this);
	dyn_sub[3] = node.subscribe("/tilt_controller13/state", 1, &Joy_leg::joint_callback13, this);
	dyn_sub[4] = node.subscribe("/tilt_controller20/state", 1, &Joy_leg::joint_callback20, this);
	dyn_sub[5] = node.subscribe("/tilt_controller21/state", 1, &Joy_leg::joint_callback21, this);
	dyn_sub[6] = node.subscribe("/tilt_controller22/state", 1, &Joy_leg::joint_callback22, this);
	dyn_sub[7] = node.subscribe("/tilt_controller23/state", 1, &Joy_leg::joint_callback23, this);
	dyn_sub[8] = node.subscribe("/tilt_controller30/state", 1, &Joy_leg::joint_callback30, this);
	dyn_sub[9] = node.subscribe("/tilt_controller31/state", 1, &Joy_leg::joint_callback31, this);
	dyn_sub[10] = node.subscribe("/tilt_controller32/state", 1, &Joy_leg::joint_callback32, this);
	dyn_sub[11] = node.subscribe("/tilt_controller33/state", 1, &Joy_leg::joint_callback33, this);
	dyn_sub[12] = node.subscribe("/tilt_controller40/state", 1, &Joy_leg::joint_callback40, this);
	dyn_sub[13] = node.subscribe("/tilt_controller41/state", 1, &Joy_leg::joint_callback41, this);
	dyn_sub[14] = node.subscribe("/tilt_controller42/state", 1, &Joy_leg::joint_callback42, this);
	dyn_sub[15] = node.subscribe("/tilt_controller43/state", 1, &Joy_leg::joint_callback43, this);
	
	roll_sub = node.subscribe("/roll", 1, &Joy_leg::roll, this);
	pitch_sub = node.subscribe("/pitch", 1, &Joy_leg::pitch, this);

	dyn_state_to_urdf = node.advertise<sensor_msgs::JointState>("/joint_states", 1);
	
	


    
	jsm.name.resize(18); // ジョイント数によりメッセージサイズを設定
	jsm.position.resize(18);
	
	
	jsm.name[0] = "roll";
	jsm.name[1] = "pitch";
	jsm.name[2] = "front_left_1_joint";
	jsm.name[3] = "front_left_2_joint";
	jsm.name[4] = "front_left_3_joint";
	jsm.name[5] = "front_left_4_bracket_joint";
	jsm.name[6] = "front_right_1_joint";
	jsm.name[7] = "front_right_2_joint";
	jsm.name[8] = "front_right_3_joint";
	jsm.name[9] = "front_right_4_bracket_joint";
	jsm.name[10] = "back_left_1_joint";
	jsm.name[11] = "back_left_2_joint";
	jsm.name[12] = "back_left_3_joint";
	jsm.name[13] = "back_left_4_bracket_joint";
	jsm.name[14] = "back_right_1_joint";
	jsm.name[15] = "back_right_2_joint";
	jsm.name[16] = "back_right_3_joint";
	jsm.name[17] = "back_right_4_bracket_joint";
	
}


void Joy_leg::joycallback(const sensor_msgs::Joy &joy_msg)
{
	
	struct timespec ts;
	ts.tv_sec = 0;
	ts.tv_nsec = 150000000;

	//左ジョイスティック
	if (joy_msg.axes[1] > 0.1)//前進
	{
		s[1] = 1;
		joy_axes1 = joy_msg.axes[1];
	}
	else if (joy_msg.axes[1] < -0.1)//後退
	{
		s[1] = 1;
		joy_axes1 = joy_msg.axes[1];
	}
	else
	{
		s[1] = 0;
		joy_axes1 = 0;
	}
	
	if (joy_msg.axes[0] > 0.1)//右旋回
	{
		s[0] = 1;
		joy_axes0 = joy_msg.axes[0];
	}
	else if(joy_msg.axes[0] < -0.1)//左旋回
	{
		s[0] = 1;
		joy_axes0 = joy_msg.axes[0];
	}
	else
	{
		s[0] = 0;
		joy_axes0 = 0;
	}
	
	
	//右ジョイスティック
	if (joy_msg.axes[3] > 0.1)//前進
	{
		s[3] = 1;
		joy_axes3 = joy_msg.axes[3];
	}
	else if (joy_msg.axes[3] < -0.1)//後退
	{
		s[3] = 1;
		joy_axes3 = joy_msg.axes[3];
	}
	else
	{
		joy_axes3 = 0;
		s[3] = 0;
	}
	
	if (joy_msg.axes[2] > 0.1)//右旋回
	{
		s[2] = 1;
		joy_axes2 = joy_msg.axes[2];
	}
	else if(joy_msg.axes[2] < -0.1)//左旋回
	{
		s[2] = 1;
		joy_axes2 = joy_msg.axes[2];
	}
	else
	{
		s[2] = 0;
		joy_axes2 = 0;
	}
	
	
	if(joy_msg.buttons[0] == 1)//△ボタン
	{
		b0 = 1;
		b1 = 0;
		b2 = 0;
		b3 = 0;
		//ROS_INFO("sankaku");
	}	
	else if(joy_msg.buttons[1] == 1)//○ボタン
	{
		b0 = 0;
		b1 = 1;
		b2 = 0;
		b3 = 0;
		//ROS_INFO("maru");
	}
	else if(joy_msg.buttons[2] == 1)//×ボタン
	{
		b0 = 0;
		b1 = 0;
		b2 = 1;
		b3 = 0;
		//ROS_INFO("batsu");
	}
	else if(joy_msg.buttons[3] == 1)//□ボタン
	{
		b0 = 0;
		b1 = 0;
		b2 = 0;
		b3 = 1;
		//ROS_INFO("sikaku");
	}
	else{
		b0 = 0;
		b1 = 0;
		b2 = 0;
		b3 = 0;
	}
	
	b4 = joy_msg.buttons[4];//L2
	b5 = joy_msg.buttons[5];//R2
	b6 = joy_msg.buttons[6];//L1
	b7 = joy_msg.buttons[7];//R1
	
	b8 = joy_msg.buttons[8];//startボタン

	
	if (joy_msg.buttons[12] ==1)//矢印キー↑
	{
		b12 = 1;
		b14 = 0;
		//ROS_INFO("up");
	}
	else if(joy_msg.buttons[14] ==1)//矢印キー↓
	{
		b12 = 0;
		b14 = 1;
		//ROS_INFO("down");
	}
	else if (joy_msg.buttons[13] ==1)//矢印キー→
	{
		b13 = 1;
		b15 = 0;
		//ROS_INFO("right");
	}
	else if(joy_msg.buttons[15] ==1)//矢印キー←
	{
		b13 = 0;
		b15 = 1;
		//ROS_INFO("left");
	}
    else{
	    b12 = 0;
	    b13 = 0;
		b14 = 0;
		b15 = 0;
	}
	
	
	if(joy_msg.buttons[10] == 1)//左ジョイスティックボタン
	{
		b9 = 0;
		b10 = 1;
		b11 = 0;
	}	
	else if(joy_msg.buttons[11] == 1)//右ジョイスティックボタン
	{
		b9 = 0;
		b10 = 0;
		b11 = 1;
	}
	else if(joy_msg.buttons[9] == 1)//SELECT
	{
		b9 = 1;
		b10 = 0;
		b11 = 0;
	}
	
}


//加速度センサーの値をjoint_angleに入れる関数
void Joy_leg::roll(const std_msgs::Float64ConstPtr& msg)
{
	joint_angle[1] = - msg -> data;
}

void Joy_leg::pitch(const std_msgs::Float64ConstPtr& msg)
{
	joint_angle[0] = - msg -> data;
}




//dynamixelの角度を読み取る関数
void Joy_leg::joint_callback10(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[2] = pos -> current_pos;
	velocity11 = pos -> velocity;
	ROS_INFO("%f",joint_angle[0]);
}

void Joy_leg::joint_callback11(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[3] = pos -> current_pos;
	//ROS_INFO("%f",velocity11);
}

void Joy_leg::joint_callback12(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[4] = pos -> current_pos;
}

void Joy_leg::joint_callback13(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[5] = pos -> current_pos;
}

void Joy_leg::joint_callback20(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[6] = pos -> current_pos;
}

void Joy_leg::joint_callback21(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[7] = pos -> current_pos;
}

void Joy_leg::joint_callback22(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[8] = pos -> current_pos;
}

void Joy_leg::joint_callback23(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[9] = pos -> current_pos;
}

void Joy_leg::joint_callback30(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[10] = pos -> current_pos;
	velocity26 = pos -> velocity;
}

void Joy_leg::joint_callback31(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[11] =  pos -> current_pos;
}

void Joy_leg::joint_callback32(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[12] = pos -> current_pos;
}

void Joy_leg::joint_callback33(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[13] = pos -> current_pos;
}

void Joy_leg::joint_callback40(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[14] = pos -> current_pos;
}

void Joy_leg::joint_callback41(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[15] = pos -> current_pos;
}

void Joy_leg::joint_callback42(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[16] = pos -> current_pos;
}

void Joy_leg::joint_callback43(const dynamixel_msgs::JointState::ConstPtr& pos){
	joint_angle[17] = pos -> current_pos;
}


//度数法をラジアン法に変換する関数
float Joy_leg::deg_to_rad(float deg)
{
	float rad;
	
	rad = (float)(2 * PI * deg / 360);
	
	return(rad);	
	
}

//0.1秒ごとに実行する関数
void Joy_leg::timerCallback(const ros::TimerEvent&)
{
	//初期姿勢（レディネスモード）
	if(initial == 0)
	{
		pos[10].data = 0;
		pos[11].data = 1.5;
		pos[12].data = 0;
		pos[13].data = 0;
		pos[20].data = 0;
		pos[21].data = 1.5;
		pos[22].data = 0;
		pos[23].data = 0;
		pos[30].data = 0;
		pos[31].data = 1.5;
		pos[32].data = -1.5;
		pos[33].data = -1.4;
		pos[40].data = 0;
		pos[41].data = 1.5;
		pos[42].data = -1.5;
		pos[43].data = -1.4;
		
		
		pos[1].data = 0.6;
		pos[2].data = 0.4;
		pos[3].data = 1.5;
		
		initial = 1;
	}
	
	
	
	
	//把持モード
	if(b8 == 1)
	{
		pos[10].data = 0;
		pos[11].data = 1.5;
		pos[12].data = -1.5;
		pos[13].data = -1.4;
		pos[20].data = 0;
		pos[21].data = 1.5;
		pos[22].data = -1.5;
		pos[23].data = -1.4;
		pos[30].data = 0;
		pos[31].data = 1.5;
		pos[32].data = -1.5;
		pos[33].data = -1.4;
		pos[40].data = 0;
		pos[41].data = 1.5;
		pos[42].data = -1.5;
		pos[43].data = -1.4;


		x_back_left = 0.15;
		y_back_left = 0;
		x_back_right = 0.15;
		y_back_right = 0;
		
		
			
		pos[1].data = 0.6;
		pos[2].data = 0.4;
		pos[3].data = 1.5;
	
	}
	


	//前足モード（長い方）
	if(b10 == 1)
	{
		if(b3 == 1)//backleftを右回転
		{
			pos[20].data = pos[20].data + 0.02;
		}
		
		if(b1 == 1)//backleftを左回転
		{
			pos[20].data = pos[20].data - 0.02;
		}
		
		if(b13 == 1)//backrightを右回転
		{
			pos[10].data = pos[10].data - 0.02;
		}
		
		if(b15 == 1)//backrightを左回転
		{
			pos[10].data = pos[10].data + 0.02;
		}
		
		
		//前足の適当逆運動学
		if(b5 == 1)//backleftを下げる
		{
			pos[21].data = pos[21].data - 0.05;
			
			if(pos[21].data < 1.5)
			{
				pos[22].data = pos[22].data + 0.02;
			}
			else
			{
				pos[22].data = pos[22].data - 0.03;
			}
		}
		
		if(b7 == 1)//backleftを上げる
		{
			pos[21].data = pos[21].data + 0.05;
			
			if(pos[21].data < 1.5)
			{
				pos[22].data = pos[22].data - 0.02;
			}
			else
			{
				pos[22].data = pos[22].data + 0.03;
			}
			
		}
		
		if(b4 == 1)//backrightを下げる
		{
			pos[11].data = pos[11].data - 0.05;
			
			if(pos[11].data < 1.5)
			{
				pos[12].data = pos[12].data + 0.02;
			}
			else
			{
				pos[12].data = pos[12].data - 0.03;
			}
		}
		
		if(b6 == 1)//backrightを上げる
		{
			pos[11].data = pos[11].data + 0.05;
			
			if(pos[11].data < 1.5)
			{
				pos[12].data = pos[12].data - 0.02;
			}
			else
			{
				pos[12].data = pos[12].data + 0.03;
			}
		}
		
		
		
		if(b0 == 1)//backleftをカメラから見て前に
		{
			pos[21].data = pos[21].data - 0.04;
			pos[22].data = pos[22].data + 0.05;
		}
		
		if(b2 == 1)//backleftをカメラから見て後ろに
		{
			pos[21].data = pos[21].data + 0.04;
			pos[22].data = pos[22].data - 0.05;
		}
		
		if(b12 == 1)//backrightをカメラから見て前に
		{
			pos[11].data = pos[11].data - 0.04;
			pos[12].data = pos[12].data + 0.05;
		}
		
		if(b14 == 1)//backrightをカメラから見て後ろに
		{
			pos[11].data = pos[11].data + 0.04;
			pos[12].data = pos[12].data - 0.05;
		}
	}


	//後ろ足モード
	if(b11 == 1)
	{

		if(b3 == 1)//backleftを右回転
		{
			pos[40].data = pos[40].data + 0.02;
		}
		
		if(b1 == 1)//backleftを左回転
		{
			pos[40].data = pos[40].data - 0.02;
		}
		
		if(b13 == 1)//backrightを右回転
		{
			pos[30].data = pos[30].data - 0.02;
		}
		
		if(b15 == 1)//backrightを左回転
		{
			pos[30].data = pos[30].data + 0.02;
		}


		
		if(b5 == 1)//frontleftを下げる
		{
			y_back_right += 0.004;
		}
		
		if(b7 == 1)//frontleftを上げる
		{
			y_back_right -= 0.004;
		}
		
		if(b0 == 1)//frontleftをカメラから見て前に
		{
			x_back_right += 0.004;
		}
		
		if(b2 == 1)//frontleftをカメラから見て後ろに
		{
			x_back_right -= 0.004;
		}
		
		
		
		if(b4 == 1)//frontleftを下げる
		{
			y_back_left += 0.004;
		}
		
		if(b6 == 1)//frontleftを上げる
		{
			y_back_left -= 0.004;
		}
		
		if(b12 == 1)//frontleftをカメラから見て前に
		{
			x_back_left += 0.004;
		}
		
		if(b14 == 1)//frontleftをカメラから見て後ろに
		{
			x_back_left -= 0.004;
		}


		right_angle1_ = acos((pow(l1,2)-pow(l2,2)+(pow(x_back_right,2)+pow(y_back_right,2)))/((2*l1)*sqrt(pow(x_back_right,2)+pow(y_back_right,2))));
		right_angle1 = atan2(y_back_right,x_back_right)-right_angle1_;
		right_angle2_ = acos((pow(l2,2)-pow(l1,2)+(pow(x_back_right,2)+pow(y_back_right,2)))/((2*l2)*sqrt(pow(x_back_right,2)+pow(y_back_right,2))));
		right_angle2 = right_angle1_ + right_angle2_;

		pos[41].data = -right_angle1;
		pos[42].data = -right_angle2 - deg_to_rad(40);


		left_angle1_ = acos((pow(l1,2)-pow(l2,2)+(pow(x_back_left,2)+pow(y_back_left,2)))/((2*l1)*sqrt(pow(x_back_left,2)+pow(y_back_left,2))));
		left_angle1 = atan2(y_back_left,x_back_left)-left_angle1_;
		left_angle2_ = acos((pow(l2,2)-pow(l1,2)+(pow(x_back_left,2)+pow(y_back_left,2)))/((2*l2)*sqrt(pow(x_back_left,2)+pow(y_back_left,2))));
		left_angle2 = left_angle1_ + left_angle2_;

		pos[31].data = -left_angle1;
		pos[32].data = -left_angle2 - deg_to_rad(40);
		
					
	}


	

	
	
	//胴体車輪駆動
	if (s[1] == 1)//前後
	{
		pos[15].data = 1 * speed * joy_axes1;//本体車輪
		pos[25].data = -1 * speed * joy_axes1;
		pos[35].data = -1 * speed * joy_axes1;
		pos[45].data = 1 * speed * joy_axes1;
		
	}

	else if (s[0] == 1)//左右
	{
		pos[15].data = -1 * speed2 * joy_axes0;
		pos[25].data = -1 * speed2 * joy_axes0;
		pos[35].data = -1 * speed2 * joy_axes0;
		pos[45].data = -1 * speed2 * joy_axes0;

	}

	else
	{
		pos[15].data = 0;
		pos[25].data = 0;
		pos[35].data = 0;
		pos[45].data = 0;

	}	
	
	
	
	
	if (s[3] == 1)//
	{
		pos[14].data = -1 * speed * joy_axes3;//脚車輪
		pos[24].data = 1 * speed * joy_axes3;
		pos[34].data = -1 * speed * joy_axes3;
		pos[44].data = 1 * speed * joy_axes3;
	}

	else if (s[2] == 1)//
	{
		pos[14].data = 1 * speed2 * joy_axes2;
		pos[24].data = 1 * speed2 * joy_axes2;
		pos[34].data = -1 * speed2 * joy_axes2;
		pos[44].data = -1 * speed2 * joy_axes2;
	}

	else
	{
		pos[14].data = 0;
		pos[24].data = 0;
		pos[34].data = 0;
		pos[44].data = 0;
	}
	
	
		//胴体車輪駆動(カメラモードで○を押しながらジョイスティック)
	if (s[1] == 1 && b1 == 1)//前後
	{
		pos[15].data = 1 * speed * joy_axes1;//本体車輪
		pos[25].data = -1 * speed * joy_axes1;
		pos[35].data = -1 * speed * joy_axes1;
		pos[45].data = 1 * speed * joy_axes1;
		
		pos[14].data = -1 * speed * joy_axes1;//脚車輪
		pos[24].data = 1 * speed * joy_axes1;
		pos[34].data = -1 * speed * joy_axes1;
		pos[44].data = 1 * speed * joy_axes1;
	}

	else if (s[0] == 1 && b1 == 1)//左右
	{
		pos[15].data = -1 * speed2 * joy_axes0;
		pos[25].data = -1 * speed2 * joy_axes0;
		pos[35].data = -1 * speed2 * joy_axes0;
		pos[45].data = -1 * speed2 * joy_axes0;
		
		pos[14].data = 1 * speed2 * joy_axes0;
		pos[24].data = 1 * speed2 * joy_axes0;
		pos[34].data = -1 * speed2 * joy_axes0;
		pos[44].data = -1 * speed2 * joy_axes0;
	}
	
		

	if(b9 == 1)
	{
		if(b15==1)
		{					//カメラアーム肩(上下ボタン+×ボタン)
			pos[3].data = pos[3].data+0.1;
			//ROS_INFO("shulder up!");
		}
		else if(b13==1)
		{
			pos[3].data = pos[3].data-0.1;

		}
		else if(b12==1)
		{
			pos[2].data = pos[2].data-0.1;

		}
		else if(b14==1)
		{
			pos[2].data = pos[2].data+0.1;
			//ROS_INFO("elbow down!");
		}	
		else if(b0==1)
		{//カメラアーム手先(上下ボタン+△ボタン)
			pos[1].data = pos[1].data-0.05;

			//ROS_INFO("rist up!");
		}
		else if(b2==1)
		{
			pos[1].data = pos[1].data+0.05;

			//ROS_INFO("rist down!");
		}
		
			if (pos[1].data < -1.2)
			{
				pos[1].data = -1.2;
			}
			if (pos[1].data > 1.2)
			{
				pos[1].data = 1.2;
			}
		
		
		
		//手首
		if(b7 == 1)
		{
			pos[23].data = pos[23].data+0.1;
		}
		
		if(b5 == 1)
		{
			pos[23].data = pos[23].data-0.1;
		}
		
		if(b6 == 1)
		{
			pos[13].data = pos[13].data+0.1;
		}
		
		if(b4 == 1)
		{
			pos[13].data = pos[13].data-0.1;
		}
		
		
		//最小モード（nego,align,center）
		
		if(b3 == 1)
		{
			
			
			pos[10].data = -0.28;
			pos[11].data = 2.95;
			pos[12].data = 0.95;
			pos[13].data = 1.0;
			
			pos[20].data = 0.28;
			pos[21].data = 2.95;
			pos[22].data = 0.95;
			pos[23].data = 1.0;
			
			
			//nego
			
			pos[1].data = 1.2;
			pos[2].data = 1.2;
			pos[3].data = 1.5;
			
			
			
			//align
			
			//pos[1].data = 1;
			//pos[2].data = -0.5;
			//pos[3].data = 0;
			
			
			pos[40].data = 0;
			pos[41].data = 1.5;
			pos[42].data = 0.3;
			pos[43].data = 1.5;
			
			pos[30].data = 0;
			pos[31].data = 1.5;
			pos[32].data = 0.3;
			pos[33].data = 1.5;
			
		}
  	
	}








	//指令の送信//カメラアーム
	for(int i=1;i<4;i++)
	{
		dyn_pub[i].publish(pos[i]);
    }
    
    dyn_pub[15].publish(pos[15]);//本体車輪
    dyn_pub[25].publish(pos[25]);
    dyn_pub[35].publish(pos[35]);
    dyn_pub[45].publish(pos[45]);
    dyn_pub[14].publish(pos[14]);//脚車輪
    dyn_pub[24].publish(pos[24]);
    dyn_pub[34].publish(pos[34]);
    dyn_pub[44].publish(pos[44]);
        
    
    pos[26].data = - pos[21].data;
    pos[16].data = - pos[11].data;
    
    jsm.header.stamp = ros::Time::now();
    
    
    //テザー、nego,align,center用
    /*
    		pos[40].data = 0;
			pos[41].data = 1.5;
			pos[42].data = 0.3;
			pos[43].data = 1.5;
			
			pos[30].data = 0;
			pos[31].data = 1.5;
			pos[32].data = 0.3;
			pos[33].data = 1.5;
	*/
			
    
    dyn_pub[10].publish(pos[10]);
    dyn_pub[11].publish(pos[11]);
    dyn_pub[12].publish(pos[12]);
    dyn_pub[13].publish(pos[13]);
    dyn_pub[16].publish(pos[16]);
    dyn_pub[20].publish(pos[20]);
    dyn_pub[21].publish(pos[21]);
    dyn_pub[22].publish(pos[22]);
    dyn_pub[23].publish(pos[23]);
    dyn_pub[26].publish(pos[26]);
    dyn_pub[30].publish(pos[30]);
    dyn_pub[31].publish(pos[31]);
    dyn_pub[32].publish(pos[32]);
    dyn_pub[33].publish(pos[33]);
    dyn_pub[40].publish(pos[40]);
    dyn_pub[41].publish(pos[41]);
    dyn_pub[42].publish(pos[42]);
    dyn_pub[43].publish(pos[43]);
    
    
    jsm.position[0] = joint_angle[0] - 0.127;
    jsm.position[1] = joint_angle[1] + 0.09;
    
    jsm.position[2] = joint_angle[10];
    jsm.position[3] = joint_angle[11];
    jsm.position[4] = joint_angle[12];
    jsm.position[5] = joint_angle[13];
    jsm.position[6] = joint_angle[14];
    jsm.position[7] = joint_angle[15];
    jsm.position[8] = joint_angle[16];
    jsm.position[9] = joint_angle[17];
    jsm.position[10] = joint_angle[6];
    jsm.position[11] = joint_angle[7];
    jsm.position[12] = joint_angle[8];
    jsm.position[13] = joint_angle[9];
    jsm.position[14] = joint_angle[2];
    jsm.position[15] = joint_angle[3];
    jsm.position[16] = joint_angle[4];
    jsm.position[17] = joint_angle[5];

	dyn_state_to_urdf.publish(jsm);
   
	
    
}

int main(int argc, char **argv)
{

	ros::init(argc, argv, "joy_robot");
	Joy_leg joy_r;
	ros::spin();
	return 0;
}

